import React, { useState, useEffect } from 'react';
import {
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Box,
  Chip
} from '@mui/material';
import { Match, Team } from '../types';
import { matchService, teamService } from '../services/api.service';

const MatchList: React.FC = () => {
  const [matches, setMatches] = useState<Match[]>([]);
  const [teams, setTeams] = useState<Team[]>([]);
  const [open, setOpen] = useState(false);
  const [newMatch, setNewMatch] = useState<Omit<Match, '_id'>>({
    team1: '',
    team2: '',
    date: new Date(),
    overs: 20,
    status: 'upcoming',
    venue: '',
    innings: [{
      battingTeam: '',
      bowlingTeam: '',
      totalRuns: 0,
      wickets: 0,
      overs: 0,
      battingStats: [],
      bowlingStats: [],
      extras: {
        wides: 0,
        noBalls: 0,
        byes: 0,
        legByes: 0
      }
    }]
  });

  useEffect(() => {
    fetchMatches();
    fetchTeams();
  }, []);

  const fetchMatches = async () => {
    try {
      const response = await matchService.getAll();
      setMatches(response.data);
    } catch (error) {
      console.error('Error fetching matches:', error);
    }
  };

  const fetchTeams = async () => {
    try {
      const response = await teamService.getAll();
      setTeams(response.data);
    } catch (error) {
      console.error('Error fetching teams:', error);
    }
  };

  const handleOpen = () => setOpen(true);
  const handleClose = () => {
    setOpen(false);
    setNewMatch({
      team1: '',
      team2: '',
      date: new Date(),
      overs: 20,
      status: 'upcoming',
      venue: '',
      innings: [{
        battingTeam: '',
        bowlingTeam: '',
        totalRuns: 0,
        wickets: 0,
        overs: 0,
        battingStats: [],
        bowlingStats: [],
        extras: {
          wides: 0,
          noBalls: 0,
          byes: 0,
          legByes: 0
        }
      }]
    });
  };

  const handleSubmit = async () => {
    if (!newMatch.team1 || !newMatch.team2 || newMatch.overs <= 0) {
      return; // Don't submit if required fields are missing or invalid
    }
    try {
      await matchService.create(newMatch);
      handleClose();
      fetchMatches();
    } catch (error) {
      console.error('Error creating match:', error);
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
        <Typography variant="h5">Matches</Typography>
        <Button variant="contained" color="primary" onClick={handleOpen}>
          Add Match
        </Button>
      </Box>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Teams</TableCell>
              <TableCell>Date</TableCell>
              <TableCell>Overs</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Score</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {matches.map((match) => (
              <TableRow key={match._id}>
                <TableCell>{match.team1} vs {match.team2}</TableCell>
                <TableCell>{new Date(match.date).toLocaleDateString()}</TableCell>
                <TableCell>{match.overs}</TableCell>
                <TableCell>
                  <Chip
                    label={match.status}
                    color={
                      match.status === 'completed'
                        ? 'success'
                        : match.status === 'in-progress'
                        ? 'warning'
                        : 'default'
                    }
                  />
                </TableCell>
                <TableCell>
                  {match.innings[0]?.totalRuns}/{match.innings[0]?.wickets}
                  {match.innings[0]?.overs > 0 && ` (${match.innings[0]?.overs})`}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>Create New Match</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, minWidth: 400, mt: 2 }}>
            <FormControl fullWidth>
              <InputLabel>Team 1</InputLabel>
              <Select
                value={newMatch.team1}
                label="Team 1"
                onChange={(e) => setNewMatch({ ...newMatch, team1: e.target.value })}
              >
                {teams.map((team) => (
                  <MenuItem key={team._id} value={team._id}>
                    {team.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <FormControl fullWidth>
              <InputLabel>Team 2</InputLabel>
              <Select
                value={newMatch.team2}
                label="Team 2"
                onChange={(e) => setNewMatch({ ...newMatch, team2: e.target.value })}
              >
                {teams.map((team) => (
                  <MenuItem key={team._id} value={team._id}>
                    {team.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            <TextField
              label="Overs"
              type="number"
              value={newMatch.overs}
              onChange={(e) => setNewMatch({ ...newMatch, overs: parseInt(e.target.value) || 0 })}
              fullWidth
            />

            <TextField
              label="Venue"
              value={newMatch.venue}
              onChange={(e) => setNewMatch({ ...newMatch, venue: e.target.value })}
              fullWidth
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button onClick={handleSubmit} variant="contained" color="primary">
            Create
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default MatchList;