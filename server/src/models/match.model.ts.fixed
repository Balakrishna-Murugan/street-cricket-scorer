import mongoose from 'mongoose';

interface IBattingStats {
  player: mongoose.Types.ObjectId;
  runs: number;
  balls: number;
  fours: number;
  sixes: number;
  isOut: boolean;
  howOut?: string;
}

interface IBowlingStats {
  player: mongoose.Types.ObjectId;
  overs: number;
  runs: number;
  wickets: number;
  wides: number;
  noBalls: number;
}

interface IInnings {
  battingTeam: mongoose.Types.ObjectId;
  bowlingTeam: mongoose.Types.ObjectId;
  totalRuns: number;
  wickets: number;
  overs: number;
  battingStats: IBattingStats[];
  bowlingStats: IBowlingStats[];
  extras: {
    wides: number;
    noBalls: number;
    byes: number;
    legByes: number;
  };
}

export interface IMatch {
  team1: mongoose.Types.ObjectId;
  team2: mongoose.Types.ObjectId;
  date: Date;
  venue?: string;
  overs: number;
  status: 'upcoming' | 'in-progress' | 'completed';
  result?: string;
  innings: IInnings[];
  tossWinner?: mongoose.Types.ObjectId;
  tossDecision?: 'bat' | 'bowl';
}

const inningsSchema = new mongoose.Schema<IInnings>({
  battingTeam: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Team',
    required: true
  },
  bowlingTeam: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Team',
    required: true
  },
  totalRuns: { type: Number, default: 0 },
  wickets: { type: Number, default: 0 },
  overs: { type: Number, default: 0 },
  battingStats: [{
    player: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Player'
    },
    runs: { type: Number, default: 0 },
    balls: { type: Number, default: 0 },
    fours: { type: Number, default: 0 },
    sixes: { type: Number, default: 0 },
    isOut: { type: Boolean, default: false },
    howOut: String
  }],
  bowlingStats: [{
    player: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Player'
    },
    overs: { type: Number, default: 0 },
    runs: { type: Number, default: 0 },
    wickets: { type: Number, default: 0 },
    wides: { type: Number, default: 0 },
    noBalls: { type: Number, default: 0 }
  }],
  extras: {
    wides: { type: Number, default: 0 },
    noBalls: { type: Number, default: 0 },
    byes: { type: Number, default: 0 },
    legByes: { type: Number, default: 0 }
  }
});

const matchSchema = new mongoose.Schema<IMatch>({
  team1: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Team',
    required: true
  },
  team2: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Team',
    required: true
  },
  date: {
    type: Date,
    default: Date.now
  },
  venue: String,
  overs: {
    type: Number,
    required: true
  },
  status: {
    type: String,
    enum: ['upcoming', 'in-progress', 'completed'],
    default: 'upcoming'
  },
  result: String,
  innings: [inningsSchema],
  tossWinner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Team'
  },
  tossDecision: {
    type: String,
    enum: ['bat', 'bowl']
  }
}, { timestamps: true });

export const Match = mongoose.model<IMatch>('Match', matchSchema);